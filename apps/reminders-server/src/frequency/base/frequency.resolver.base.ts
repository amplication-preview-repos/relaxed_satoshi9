/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Frequency } from "./Frequency";
import { FrequencyCountArgs } from "./FrequencyCountArgs";
import { FrequencyFindManyArgs } from "./FrequencyFindManyArgs";
import { FrequencyFindUniqueArgs } from "./FrequencyFindUniqueArgs";
import { CreateFrequencyArgs } from "./CreateFrequencyArgs";
import { UpdateFrequencyArgs } from "./UpdateFrequencyArgs";
import { DeleteFrequencyArgs } from "./DeleteFrequencyArgs";
import { ReminderFindManyArgs } from "../../reminder/base/ReminderFindManyArgs";
import { Reminder } from "../../reminder/base/Reminder";
import { FrequencyService } from "../frequency.service";
@graphql.Resolver(() => Frequency)
export class FrequencyResolverBase {
  constructor(protected readonly service: FrequencyService) {}

  async _frequenciesMeta(
    @graphql.Args() args: FrequencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Frequency])
  async frequencies(
    @graphql.Args() args: FrequencyFindManyArgs
  ): Promise<Frequency[]> {
    return this.service.frequencies(args);
  }

  @graphql.Query(() => Frequency, { nullable: true })
  async frequency(
    @graphql.Args() args: FrequencyFindUniqueArgs
  ): Promise<Frequency | null> {
    const result = await this.service.frequency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Frequency)
  async createFrequency(
    @graphql.Args() args: CreateFrequencyArgs
  ): Promise<Frequency> {
    return await this.service.createFrequency({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Frequency)
  async updateFrequency(
    @graphql.Args() args: UpdateFrequencyArgs
  ): Promise<Frequency | null> {
    try {
      return await this.service.updateFrequency({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Frequency)
  async deleteFrequency(
    @graphql.Args() args: DeleteFrequencyArgs
  ): Promise<Frequency | null> {
    try {
      return await this.service.deleteFrequency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Reminder], { name: "reminders" })
  async findReminders(
    @graphql.Parent() parent: Frequency,
    @graphql.Args() args: ReminderFindManyArgs
  ): Promise<Reminder[]> {
    const results = await this.service.findReminders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
