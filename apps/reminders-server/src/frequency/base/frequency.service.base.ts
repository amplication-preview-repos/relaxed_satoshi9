/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Frequency as PrismaFrequency,
  Reminder as PrismaReminder,
} from "@prisma/client";

export class FrequencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FrequencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.frequency.count(args);
  }

  async frequencies<T extends Prisma.FrequencyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FrequencyFindManyArgs>
  ): Promise<PrismaFrequency[]> {
    return this.prisma.frequency.findMany<Prisma.FrequencyFindManyArgs>(args);
  }
  async frequency<T extends Prisma.FrequencyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FrequencyFindUniqueArgs>
  ): Promise<PrismaFrequency | null> {
    return this.prisma.frequency.findUnique(args);
  }
  async createFrequency<T extends Prisma.FrequencyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FrequencyCreateArgs>
  ): Promise<PrismaFrequency> {
    return this.prisma.frequency.create<T>(args);
  }
  async updateFrequency<T extends Prisma.FrequencyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FrequencyUpdateArgs>
  ): Promise<PrismaFrequency> {
    return this.prisma.frequency.update<T>(args);
  }
  async deleteFrequency<T extends Prisma.FrequencyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FrequencyDeleteArgs>
  ): Promise<PrismaFrequency> {
    return this.prisma.frequency.delete(args);
  }

  async findReminders(
    parentId: string,
    args: Prisma.ReminderFindManyArgs
  ): Promise<PrismaReminder[]> {
    return this.prisma.frequency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reminders(args);
  }
}
